---
// src/pages/dashboard.astro
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';

// Define backend URL for API calls
const backendUrl = import.meta.env.PUBLIC_BACKEND_URL || 'http://localhost:8080';

// Check authentication - in a real implementation, you would validate the token
const token = Astro.cookies.get('token')?.value;
if (!token) {
    return Astro.redirect('/login');
}

// In a real implementation, you would decode the token and extract user info
// For now, we'll use placeholder data from the server-side props
const user = "Admin User";
const email = "admin@peopleflow.com";
const userRole = "admin";
const year = new Date().getFullYear();
const currentDate = new Date().toLocaleDateString('de-DE', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});

// Dashboard data - in a real implementation, you would fetch this from the backend
const dashboardData = {
    totalEmployees: 45,
    monthlyLaborCosts: "48,325.00",
    upcomingReviews: 3,
    expiredDocuments: 2,

    // Chart data
    monthlyCostsData: [
        45000, 46000, 47000, 47500, 48000, 48325, 48500, 49000, 49500, 50000, 50500, 51000
    ],
    avgCostsPerEmployeeData: [
        1000, 1020, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130
    ],
    departmentLabels: ["IT", "Vertrieb", "HR", "Marketing", "Finanzen", "Produktion"],
    departmentData: [12, 8, 3, 5, 6, 10],
    deptCostsLabels: ["IT", "Vertrieb", "HR", "Marketing", "Finanzen", "Produktion"],
    deptCostsData: [20000, 15000, 8000, 12000, 18000, 16000],
    ageGroups: ["<25", "25-34", "35-44", "45-54", "55+"],
    ageCounts: [5, 15, 12, 8, 4]
};

// Sample data for employee section
const recentEmployees = [
    {
        ID: "1",
        Name: "Max Mustermann",
        Position: "Senior Developer",
        Status: "Aktiv",
        ProfileImage: ""
    },
    {
        ID: "2",
        Name: "Anna Schmidt",
        Position: "UX Designer",
        Status: "Remote",
        ProfileImage: ""
    },
    {
        ID: "3",
        Name: "Thomas Müller",
        Position: "Product Manager",
        Status: "Aktiv",
        ProfileImage: ""
    },
    {
        ID: "4",
        Name: "Lisa Weber",
        Position: "HR Manager",
        Status: "Im Urlaub",
        ProfileImage: ""
    }
];

// Sample data for upcoming reviews
const upcomingReviewsList = [
    {
        EmployeeName: "Max Mustermann",
        ReviewType: "Jahresgespräch",
        Date: "28.05.2025"
    },
    {
        EmployeeName: "Anna Schmidt",
        ReviewType: "Projektabschluss",
        Date: "30.05.2025"
    },
    {
        EmployeeName: "Thomas Müller",
        ReviewType: "Zielvereinbarung",
        Date: "02.06.2025"
    }
];

// Sample data for recent activities
const recentActivities = [
    {
        IconBgClass: "bg-green-500",
        IconSVG: "<svg class=\"h-5 w-5 text-white\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path d=\"M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z\" /></svg>",
        Message: "<a href=\"/employees/view/1\" class=\"font-medium text-gray-900\">Max Mustermann</a> wurde als neuer Mitarbeiter hinzugefügt",
        Time: "vor 2 Stunden",
        IsLast: false
    },
    {
        IconBgClass: "bg-blue-500",
        IconSVG: "<svg class=\"h-5 w-5 text-white\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path d=\"M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z\" /></svg>",
        Message: "<a href=\"/employees/view/2\" class=\"font-medium text-gray-900\">Anna Schmidt</a> wurde aktualisiert",
        Time: "vor 5 Stunden",
        IsLast: false
    },
    {
        IconBgClass: "bg-yellow-500",
        IconSVG: "<svg class=\"h-5 w-5 text-white\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fill-rule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clip-rule=\"evenodd\" /></svg>",
        Message: "<a href=\"/employees/view/3\" class=\"font-medium text-gray-900\">Thomas Müller</a> hat einen Urlaubsantrag eingereicht",
        Time: "gestern",
        IsLast: true
    }
];

// Helper function for initials
function getInitials(fullName) {
    const parts = fullName.split(' ');
    if (parts.length === 0) return "?";
    if (parts.length === 1) return parts[0].charAt(0).toUpperCase();
    return (parts[0].charAt(0) + parts[parts.length - 1].charAt(0)).toUpperCase();
}
---

<Layout title="Dashboard - PeopleFlow">
    <Navigation active="dashboard" user={user} email={email} userRole={userRole} year={year} />

    <main class="py-10">
        <div class="px-4 sm:px-6 lg:px-8">
            <!-- Dashboard content for regular users -->
            {userRole === "user" && (
                    <div class="bg-white shadow rounded-lg p-6 mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-4">Willkommen, {user}!</h2>
                        <p class="text-gray-600 mb-4">
                            Dies ist dein persönliches Dashboard. Hier findest du Informationen zu deinem Konto und deinen Aktivitäten.
                        </p>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <h3 class="text-md font-medium text-gray-800 mb-2">Dein Profil</h3>
                                <p class="text-sm text-gray-600 mb-4">Verwalte deine persönlichen Informationen und Passwort.</p>
                                <a href="/profile" class="text-green-600 hover:text-green-800 text-sm font-medium">Zum Profil →</a>
                            </div>

                            <div class="bg-gray-50 p-4 rounded-lg">
                                <h3 class="text-md font-medium text-gray-800 mb-2">Letzte Aktivitäten</h3>
                                <div class="space-y-2">
                                    {recentActivities.map(activity => (
                                            <div class="text-sm">
                                                <span class="text-gray-500">{activity.Time}:</span>
                                                <span class="text-gray-800" set:html={activity.Message}></span>
                                            </div>
                                    ))}
                                    {recentActivities.length === 0 && (
                                            <p class="text-sm text-gray-500">Keine kürzlichen Aktivitäten.</p>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
            )}

            <!-- Dashboard content for admin, manager, hr -->
            {userRole !== "user" && (
                    <>
                        <!-- Dashboard Header with Statistics -->
                        <div class="grid grid-cols-1 gap-6 mb-6 lg:grid-cols-4">
                            <!-- Employees Card -->
                            <div class="flex items-center p-4 bg-white rounded-lg shadow-md">
                                <div class="flex-shrink-0 mr-4">
                                    <div class="p-3 rounded-full bg-[#166534]/20">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-[#15803D]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                        </svg>
                                    </div>
                                </div>
                                <div>
                                    <span class="block text-2xl font-bold text-black">{dashboardData.totalEmployees}</span>
                                    <span class="block text-gray-500">Gesamtmitarbeiter</span>
                                </div>
                            </div>

                            <!-- Personnel costs card with new Euro icon -->
                            <div class="flex items-center p-4 bg-white rounded-lg shadow-md">
                                <div class="flex-shrink-0 mr-4">
                                    <div class="p-3 rounded-full bg-[#DCFCE7]">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-8 w-8 text-[#16A34A]">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M14.25 7.756a4.5 4.5 0 1 0 0 8.488M7.5 10.5h5.25m-5.25 3h5.25M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                                        </svg>
                                    </div>
                                </div>
                                <div>
                                    <span class="block text-2xl font-bold text-black">{dashboardData.monthlyLaborCosts} €</span>
                                    <div class="flex items-center">
                                        <span class="block text-gray-500">Monatliche Personalkosten</span>
                                        <span class="relative ml-1 group">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 w-64 bg-gray-800 text-white text-xs p-2 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
                      Die Arbeitgeberkosten betragen zusätzlich 21,5% des Bruttogehalts für Sozialversicherungsbeiträge und andere gesetzliche Abgaben.
                    </span>
                  </span>
                                    </div>
                                </div>
                            </div>

                            <!-- Upcoming conversations card -->
                            <div class="flex items-center p-4 bg-white rounded-lg shadow-md">
                                <div class="flex-shrink-0 mr-4">
                                    <div class="p-3 rounded-full bg-[#EFFDC5]">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-[#C3E657]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                        </svg>
                                    </div>
                                </div>
                                <div>
                                    <span class="block text-2xl font-bold text-black">{dashboardData.upcomingReviews}</span>
                                    <span class="block text-gray-500">Anstehende Gespräche</span>
                                </div>
                            </div>

                            <!-- Expired documents card with new document icon -->
                            <div class="flex items-center p-4 bg-white rounded-lg shadow-md">
                                <div class="flex-shrink-0 mr-4">
                                    <div class="p-3 rounded-full bg-[#EFE176]/20">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-8 w-8 text-[#EFE176]">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                                        </svg>
                                    </div>
                                </div>
                                <div>
                                    <span class="block text-2xl font-bold text-black">{dashboardData.expiredDocuments}</span>
                                    <span class="block text-gray-500">Abgelaufene Dokumente</span>
                                </div>
                            </div>
                        </div>

                        <!-- Main area with cards -->
                        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                            <!-- Left column -->
                            <div class="lg:col-span-2 space-y-6">
                                <!-- Employee overview card -->
                                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                    <div class="flex items-center justify-between p-4 border-b border-gray-200">
                                        <h3 class="text-lg font-semibold text-gray-800">Mitarbeiterübersicht</h3>
                                        <div class="flex space-x-2">
                                            <div class="relative">
                                                <select id="employee-filter" class="text-sm border-gray-300 rounded-md pr-8 focus:ring-green-500 focus:border-green-500">
                                                    <option value="all">Alle</option>
                                                    <option value="active">Aktiv</option>
                                                    <option value="onLeave">Im Urlaub</option>
                                                    <option value="remote">Remote</option>
                                                </select>
                                            </div>
                                            <a href="/employees" class="text-sm text-green-600 hover:underline">Alle anzeigen</a>
                                        </div>
                                    </div>
                                    <div class="p-4">
                                        <!-- Employee Grid Section -->
                                        <div id="employees-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-4">
                                            {recentEmployees.map(employee => (
                                                    <div class="bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
                                                        <div class="flex items-center p-4">
                                                            <div class="flex-shrink-0">
                                                                {employee.ProfileImage ? (
                                                                        <img class="h-12 w-12 rounded-full object-cover" src={employee.ProfileImage} alt={employee.Name} />
                                                                ) : (
                                                                        <div class="h-12 w-12 rounded-full bg-green-100 flex items-center justify-center text-green-800 text-sm font-medium">
                                                                            {getInitials(employee.Name)}
                                                                        </div>
                                                                )}
                                                            </div>

                                                            <div class="flex-1 min-w-0 ml-4">
                                                                <p class="text-sm font-medium text-gray-900 truncate">{employee.Name}</p>
                                                                <p class="text-sm text-gray-500 truncate">{employee.Position}</p>
                                                                <div class="flex items-center mt-1">
                              <span class={`flex h-2 w-2 rounded-full ${
                                  employee.Status === "Aktiv" ? "bg-green-500" :
                                      employee.Status === "Im Urlaub" ? "bg-yellow-500" :
                                          employee.Status === "Remote" ? "bg-blue-500" :
                                              "bg-red-500"
                              } mr-1.5`}></span>
                                                                    <span class="text-xs text-gray-500">{employee.Status}</span>
                                                                </div>
                                                            </div>

                                                            <a href={`/employees/view/${employee.ID}`} class="inline-flex items-center text-xs font-medium text-green-600 hover:text-green-800 ml-2">
                                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                                                    <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                                                                    <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                                                                </svg>
                                                                Details
                                                            </a>
                                                        </div>
                                                    </div>
                                            ))}
                                            {recentEmployees.length === 0 && (
                                                    <div class="col-span-2 p-4 text-center text-gray-500">
                                                        Keine Mitarbeiter gefunden
                                                    </div>
                                            )}
                                        </div>
                                    </div>
                                </div>

                                <!-- Labor costs chart -->
                                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                    <div class="p-4 border-b border-gray-200">
                                        <h3 class="text-lg font-semibold text-gray-800">Personalkosten über Zeit (inkl. Arbeitgeberanteil)</h3>
                                    </div>
                                    <div class="p-4">
                                        <div class="relative h-64">
                                            <canvas id="laborCostsChart"></canvas>
                                        </div>
                                    </div>
                                </div>

                                <!-- New charts -->
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <!-- Personnel cost distribution by department -->
                                    <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                        <div class="p-4 border-b border-gray-200">
                                            <h3 class="text-lg font-semibold text-gray-800">Personalkosten nach Abteilung</h3>
                                        </div>
                                        <div class="p-4">
                                            <div class="relative h-72">
                                                <canvas id="deptCostsChart"></canvas>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Age structure -->
                                    <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                        <div class="p-4 border-b border-gray-200">
                                            <h3 class="text-lg font-semibold text-gray-800">Altersstruktur</h3>
                                        </div>
                                        <div class="p-4">
                                            <div class="relative h-72">
                                                <canvas id="ageDistributionChart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Right column -->
                            <div class="space-y-6">
                                <!-- Department distribution -->
                                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                    <div class="flex items-center justify-between p-4 border-b border-gray-200">
                                        <h3 class="text-lg font-semibold text-gray-800">Abteilungsverteilung</h3>
                                    </div>
                                    <div class="p-4">
                                        <div class="h-64">
                                            <canvas id="departmentChart"></canvas>
                                        </div>
                                    </div>
                                </div>

                                <!-- Upcoming meetings -->
                                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                    <div class="flex items-center justify-between p-4 border-b border-gray-200">
                                        <h3 class="text-lg font-semibold text-gray-800">Anstehende Gespräche</h3>
                                        <a href="/upcoming-conversations" class="text-sm text-green-600 hover:underline">Alle anzeigen</a>
                                    </div>
                                    <div class="p-4">
                                        <ul class="divide-y divide-gray-200">
                                            {upcomingReviewsList.map(review => (
                                                    <li class="py-3">
                                                        <div class="flex items-center justify-between">
                                                            <div>
                                                                <p class="text-sm font-medium text-gray-900">{review.EmployeeName}</p>
                                                                <p class="text-sm text-gray-500">{review.ReviewType}</p>
                                                            </div>
                                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            {review.Date}
                          </span>
                                                        </div>
                                                    </li>
                                            ))}
                                            {upcomingReviewsList.length === 0 && (
                                                    <li class="py-3 text-center text-gray-500">
                                                        Keine anstehenden Gespräche
                                                    </li>
                                            )}
                                        </ul>
                                    </div>
                                </div>

                                <!-- Recent activities -->
                                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                    <div class="flex items-center justify-between p-4 border-b border-gray-200">
                                        <h3 class="text-lg font-semibold text-gray-800">Letzte Aktivitäten</h3>
                                    </div>
                                    <div class="p-4">
                                        <div class="flow-root">
                                            <ul class="-mb-8">
                                                {recentActivities.map((activity, index) => (
                                                        <li>
                                                            <div class="relative pb-8">
                                                                {!activity.IsLast && (
                                                                        <span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                                                                )}
                                                                <div class="relative flex space-x-3">
                                                                    <div>
                                <span class={`h-8 w-8 rounded-full ${activity.IconBgClass} flex items-center justify-center ring-8 ring-white`} set:html={activity.IconSVG}>
                                </span>
                                                                    </div>
                                                                    <div class="min-w-0 flex-1">
                                                                        <div>
                                                                            <div class="text-sm text-gray-500" set:html={activity.Message}>
                                                                            </div>
                                                                            <p class="mt-0.5 text-sm text-gray-500">{activity.Time}</p>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </li>
                                                ))}
                                                {recentActivities.length === 0 && (
                                                        <li class="text-center text-gray-500 py-2">
                                                            Keine Aktivitäten gefunden
                                                        </li>
                                                )}
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </>
            )}
        </div>
    </main>

    <Footer year={year} />

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Define color palette
            const chartColors = [
                '#15803D', // Dark green
                '#22C55E', // Green
                '#86EFAC', // Light green
                '#C3E657', // Yellow-green
                '#EFE176'  // Yellow
            ];

            // Labor costs chart
            const laborCtx = document.getElementById('laborCostsChart')?.getContext('2d');
            if (laborCtx) {
                new Chart(laborCtx, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
                        datasets: [
                            {
                                label: 'Gesamtpersonalkosten inkl. AG-Anteil (€)',
                                data: [45000, 46000, 47000, 47500, 48000, 48325, 48500, 49000, 49500, 50000, 50500, 51000],
                                borderColor: chartColors[0],
                                backgroundColor: `${chartColors[0]}20`,
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Durchschnittskosten pro Mitarbeiter inkl. AG-Anteil (€)',
                                data: [1000, 1020, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130],
                                borderColor: chartColors[1],
                                backgroundColor: `${chartColors[1]}20`,
                                fill: true,
                                tension: 0.4,
                                borderDash: [5, 5]
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                callbacks: {
                                    label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(context.parsed.y);
                                        }
                                        return label;
                                    }
                                }
                            },
                            legend: {
                                position: 'top',
                            }
                        },
                        scales: {
                            x: {
                                grid: {
                                    display: false
                                }
                            },
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(value);
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // Department distribution chart
            const deptCtx = document.getElementById('departmentChart')?.getContext('2d');
            if (deptCtx) {
                new Chart(deptCtx, {
                    type: 'doughnut',
                    data: {
                        labels: ["IT", "Vertrieb", "HR", "Marketing", "Finanzen", "Produktion"],
                        datasets: [{
                            data: [12, 8, 3, 5, 6, 10],
                            backgroundColor: chartColors,
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed !== null) {
                                            label += context.parsed;
                                            label += ' Mitarbeiter';
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // Department costs chart
            const deptCostsCtx = document.getElementById('deptCostsChart')?.getContext('2d');
            if (deptCostsCtx) {
                const deptLabels = ["IT", "Vertrieb", "HR", "Marketing", "Finanzen", "Produktion"];
                const deptColors = deptLabels.map((_, index) => chartColors[index % chartColors.length]);

                new Chart(deptCostsCtx, {
                    type: 'bar',
                    data: {
                        labels: deptLabels,
                        datasets: [{
                            label: 'Personalkosten (€)',
                            data: [20000, 15000, 8000, 12000, 18000, 16000],
                            backgroundColor: deptColors,
                            borderColor: deptColors,
                            borderWidth: 1,
                            borderRadius: {
                                topLeft: 8,
                                topRight: 8,
                                bottomLeft: 0,
                                bottomRight: 0
                            },
                            borderSkipped: 'bottom'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(value);
                                    }
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(context.parsed.y);
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // Age distribution chart
            const ageCtx = document.getElementById('ageDistributionChart')?.getContext('2d');
            if (ageCtx) {
                const ageGroups = ["<25", "25-34", "35-44", "45-54", "55+"];
                const ageColors = ageGroups.map((_, index) => chartColors[index % chartColors.length]);

                new Chart(ageCtx, {
                    type: 'bar',
                    data: {
                        labels: ageGroups,
                        datasets: [{
                            label: 'Anzahl Mitarbeiter',
                            data: [5, 15, 12, 8, 4],
                            backgroundColor: ageColors,
                            borderColor: ageColors,
                            borderWidth: 1,
                            borderRadius: {
                                topLeft: 8,
                                topRight: 8,
                                bottomLeft: 0,
                                bottomRight: 0
                            },
                            borderSkipped: 'bottom'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1,
                                    precision: 0
                                }
                            }
                        }
                    }
                });
            }

            // Employee filter
            const employeeFilter = document.getElementById('employee-filter');
            if (employeeFilter) {
                employeeFilter.addEventListener('change', function() {
                    console.log('Filter changed to:', this.value);
                });
            }
        });
    </script>
</Layout>