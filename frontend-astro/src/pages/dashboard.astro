---
// src/pages/dashboard.astro
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import { BACKEND_URL } from '../config';

// Überprüfe, ob das Astro-Cookie vorhanden ist
const token = Astro.cookies.get('token')?.value;
if (!token) {
    return Astro.redirect('/login?error=Bitte melden Sie sich an, um fortzufahren.');
}

// Diese Werte würden eigentlich aus dem Token oder durch eine API-Anfrage abgerufen
// Hier verwenden wir statische Werte als Platzhalter
const user = "Admin User";
const email = "admin@peopleflow.com";
const userRole = "admin";
const year = new Date().getFullYear();
---

<Layout title="Dashboard - PeopleFlow">
    <Navigation active="dashboard" user={user} email={email} userRole={userRole} year={year} />

    <main class="py-10">
        <div class="px-4 sm:px-6 lg:px-8">
            <div id="dashboard-content">
                <!-- Ladeanimation anzeigen, bis Daten geladen sind -->
                <div class="flex justify-center items-center py-12">
                    <svg class="animate-spin -ml-1 mr-3 h-10 w-10 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span class="text-gray-600 text-lg">Lade Dashboard-Daten...</span>
                </div>
            </div>
        </div>
    </main>

    <Footer year={year} />

    <script define:vars={{ BACKEND_URL }}>
        // Funktion zum Abrufen der Dashboard-Daten
        async function fetchDashboardData() {
            try {
                // Token aus dem Cookie abrufen
                const getCookie = (name) => {
                    const value = `; ${document.cookie}`;
                    const parts = value.split(`; ${name}=`);
                    if (parts.length === 2) return parts.pop().split(';').shift();
                    return null;
                };

                const token = getCookie('token');
                if (!token) {
                    window.location.href = '/login?error=Sitzung abgelaufen. Bitte melden Sie sich erneut an.';
                    return null;
                }

                console.log('Rufe Dashboard-Daten vom Backend ab...');

                const response = await fetch(`${BACKEND_URL}/api/dashboard`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                });

                // Bei Authentifizierungsproblemen zur Login-Seite umleiten
                if (response.status === 401) {
                    console.log('Authentifizierungsfehler: Leite zur Login-Seite um...');
                    window.location.href = '/login?error=Sitzung abgelaufen. Bitte melden Sie sich erneut an.';
                    return null;
                }

                if (!response.ok) {
                    throw new Error(`Fehler beim Laden der Dashboard-Daten: ${response.status}`);
                }

                console.log('Dashboard-Daten erfolgreich abgerufen!');
                return await response.json();
            } catch (error) {
                console.error('Fehler beim Abrufen der Dashboard-Daten:', error);

                // Fallback zu Demo-Daten, wenn API-Anfrage fehlschlägt
                console.log('Verwende Demo-Daten als Fallback...');
                return {
                    userRole: 'admin',
                    user: {
                        firstName: 'Admin',
                        lastName: 'User',
                        email: 'admin@peopleflow.com'
                    },
                    totalEmployees: 45,
                    monthlyLaborCosts: "48.325,00",
                    upcomingReviews: 3,
                    expiredDocuments: 2,
                    monthlyCostsData: [42000, 44500, 46000, 48325, 47800, 49000, 51200, 52800, 54100, 55700, 56900, 58200],
                    avgCostsPerEmployeeData: [3150, 3250, 3380, 3420, 3480, 3560, 3620, 3680, 3750, 3820, 3880, 3950],
                    departmentLabels: ["Entwicklung", "Marketing", "Vertrieb", "HR", "Finanzen"],
                    departmentData: [12, 8, 15, 5, 5],
                    deptCostsLabels: ["Entwicklung", "Marketing", "Vertrieb", "HR", "Finanzen"],
                    deptCostsData: [15600, 9800, 12400, 5200, 5300],
                    ageGroups: ["20-29", "30-39", "40-49", "50-59", "60+"],
                    ageCounts: [8, 18, 12, 5, 2]
                };
            }
        }

        // Funktion zum Rendern des Dashboards basierend auf der Benutzerrolle
        function renderDashboard(data) {
            const dashboardContent = document.getElementById('dashboard-content');

            if (!dashboardContent) {
                console.error('Dashboard-Container nicht gefunden!');
                return;
            }

            const userName = `${data.user.firstName} ${data.user.lastName}`;

            // Content basierend auf der Benutzerrolle erstelllen
            let htmlContent = '';

            if (data.userRole === 'user') {
                // Einfaches Dashboard für normale Benutzer
                htmlContent = `
                    <div class="bg-white shadow rounded-lg p-6 mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 mb-4">Willkommen, ${userName}!</h2>
                        <p class="text-gray-600 mb-4">
                            Dies ist dein persönliches Dashboard. Hier findest du Informationen zu deinem Konto und deinen Aktivitäten.
                        </p>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <h3 class="text-md font-medium text-gray-800 mb-2">Dein Profil</h3>
                                <p class="text-sm text-gray-600 mb-4">Verwalte deine persönlichen Informationen und Passwort.</p>
                                <a href="/profile" class="text-green-600 hover:text-green-800 text-sm font-medium">Zum Profil →</a>
                            </div>
                            
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <h3 class="text-md font-medium text-gray-800 mb-2">Letzte Aktivitäten</h3>
                                <div class="space-y-2">
                                    <p class="text-sm text-gray-500">Keine kürzlichen Aktivitäten.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } else {
                // Admin/Manager Dashboard
                htmlContent = `
                    <!-- Dashboard Header mit Statistiken -->
                    <div class="grid grid-cols-1 gap-6 mb-6 lg:grid-cols-4">
                        <!-- Mitarbeiter-Karte -->
                        <div class="flex items-center p-4 bg-white rounded-lg shadow-md">
                            <div class="flex-shrink-0 mr-4">
                                <div class="p-3 rounded-full bg-[#166534]/20">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-[#15803D]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                    </svg>
                                </div>
                            </div>
                            <div>
                                <span class="block text-2xl font-bold text-black">${data.totalEmployees}</span>
                                <span class="block text-gray-500">Gesamtmitarbeiter</span>
                            </div>
                        </div>

                        <!-- Personalkosten-Karte -->
                        <div class="flex items-center p-4 bg-white rounded-lg shadow-md">
                            <div class="flex-shrink-0 mr-4">
                                <div class="p-3 rounded-full bg-[#DCFCE7]">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-8 w-8 text-[#16A34A]">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M14.25 7.756a4.5 4.5 0 1 0 0 8.488M7.5 10.5h5.25m-5.25 3h5.25M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                                    </svg>
                                </div>
                            </div>
                            <div>
                                <span class="block text-2xl font-bold text-black">${data.monthlyLaborCosts} €</span>
                                <div class="flex items-center">
                                    <span class="block text-gray-500">Monatliche Personalkosten</span>
                                </div>
                            </div>
                        </div>

                        <!-- Anstehende Gespräche-Karte -->
                        <div class="flex items-center p-4 bg-white rounded-lg shadow-md">
                            <div class="flex-shrink-0 mr-4">
                                <div class="p-3 rounded-full bg-[#EFFDC5]">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-[#C3E657]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                    </svg>
                                </div>
                            </div>
                            <div>
                                <span class="block text-2xl font-bold text-black">${data.upcomingReviews}</span>
                                <span class="block text-gray-500">Anstehende Gespräche</span>
                            </div>
                        </div>

                        <!-- Abgelaufene Dokumente-Karte -->
                        <div class="flex items-center p-4 bg-white rounded-lg shadow-md">
                            <div class="flex-shrink-0 mr-4">
                                <div class="p-3 rounded-full bg-[#EFE176]/20">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-8 w-8  text-[#EFE176]">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                                    </svg>
                                </div>
                            </div>
                            <div>
                                <span class="block text-2xl font-bold text-black">${data.expiredDocuments}</span>
                                <span class="block text-gray-500">Abgelaufene Dokumente</span>
                            </div>
                        </div>
                    </div>

                    <!-- Hauptbereich mit Karten -->
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                        <!-- Linke Spalte -->
                        <div class="lg:col-span-2 space-y-6">
                            <!-- Personalkosten-Diagramm -->
                            <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                <div class="p-4 border-b border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800">Personalkosten über Zeit (inkl. Arbeitgeberanteil)</h3>
                                </div>
                                <div class="p-4">
                                    <div class="relative h-64">
                                        <canvas id="laborCostsChart"></canvas>
                                    </div>
                                </div>
                            </div>

                            <!-- Neue Charts -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <!-- Personalkostenverteilung nach Abteilung -->
                                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                    <div class="p-4 border-b border-gray-200">
                                        <h3 class="text-lg font-semibold text-gray-800">Personalkosten nach Abteilung</h3>
                                    </div>
                                    <div class="p-4">
                                        <div class="relative h-72">
                                            <canvas id="deptCostsChart"></canvas>
                                        </div>
                                    </div>
                                </div>

                                <!-- Altersstruktur -->
                                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                    <div class="p-4 border-b border-gray-200">
                                        <h3 class="text-lg font-semibold text-gray-800">Altersstruktur</h3>
                                    </div>
                                    <div class="p-4">
                                        <div class="relative h-72">
                                            <canvas id="ageDistributionChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Rechte Spalte -->
                        <div class="space-y-6">
                            <!-- Abteilungsverteilung -->
                            <div class="bg-white rounded-xl shadow-md overflow-hidden">
                                <div class="flex items-center justify-between p-4 border-b border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800">Abteilungsverteilung</h3>
                                </div>
                                <div class="p-4">
                                    <div class="h-64">
                                        <canvas id="departmentChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }

            // HTML-Inhalt in den Container einfügen
            dashboardContent.innerHTML = htmlContent;

            // Diagramme initialisieren (nur wenn userRole nicht 'user' ist)
            if (data.userRole !== 'user') {
                initCharts(data);
            }
        }

        // Funktion zur Initialisierung aller Diagramme
        function initCharts(data) {
            // Farbpalette definieren
            const chartColors = [
                '#15803D', // Dunkelgrün
                '#22C55E', // Grün
                '#86EFAC', // Hellgrün
                '#C3E657', // Gelbgrün
                '#EFE176'  // Gelb
            ];

            // Personalkosten-Diagramm
            const laborCtx = document.getElementById('laborCostsChart').getContext('2d');
            new Chart(laborCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
                    datasets: [
                        {
                            label: 'Gesamtpersonalkosten inkl. AG-Anteil (€)',
                            data: data.monthlyCostsData,
                            borderColor: chartColors[0],
                            backgroundColor: `${chartColors[0]}20`, // 20 entspricht einer Opazität von 0.12
                            fill: true,
                            tension: 0.4
                        },
                        {
                            label: 'Durchschnittskosten pro Mitarbeiter inkl. AG-Anteil (€)',
                            data: data.avgCostsPerEmployeeData,
                            borderColor: chartColors[1],
                            backgroundColor: `${chartColors[1]}20`,
                            fill: true,
                            tension: 0.4,
                            borderDash: [5, 5]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(context.parsed.y);
                                    }
                                    return label;
                                }
                            }
                        },
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(value);
                                }
                            }
                        }
                    }
                }
            });

            // Abteilungsverteilung-Diagramm
            const deptCtx = document.getElementById('departmentChart').getContext('2d');
            new Chart(deptCtx, {
                type: 'doughnut',
                data: {
                    labels: data.departmentLabels,
                    datasets: [{
                        data: data.departmentData,
                        backgroundColor: chartColors,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        label += context.parsed;
                                        label += ' Mitarbeiter';
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });

            // Personalkostenverteilung nach Abteilung
            const deptCostsCtx = document.getElementById('deptCostsChart').getContext('2d');
            // Erstelle ein Array von Farben für jede Abteilung
            const deptColors = data.deptCostsLabels.map((_, index) => chartColors[index % chartColors.length]);

            new Chart(deptCostsCtx, {
                type: 'bar',
                data: {
                    labels: data.deptCostsLabels,
                    datasets: [{
                        label: 'Personalkosten (€)',
                        data: data.deptCostsData,
                        backgroundColor: deptColors,
                        borderColor: deptColors,
                        borderWidth: 1,
                        borderRadius: {
                            topLeft: 8,
                            topRight: 8,
                            bottomLeft: 0,
                            bottomRight: 0
                        },
                        borderSkipped: 'bottom'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(value);
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(context.parsed.y);
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });

            // Altersstruktur
            const ageCtx = document.getElementById('ageDistributionChart').getContext('2d');
            // Erstelle ein Array von Farben für jede Altersgruppe
            const ageColors = data.ageGroups.map((_, index) => chartColors[index % chartColors.length]);

            new Chart(ageCtx, {
                type: 'bar',
                data: {
                    labels: data.ageGroups,
                    datasets: [{
                        label: 'Anzahl Mitarbeiter',
                        data: data.ageCounts,
                        backgroundColor: ageColors,
                        borderColor: ageColors,
                        borderWidth: 1,
                        borderRadius: {
                            topLeft: 8,
                            topRight: 8,
                            bottomLeft: 0,
                            bottomRight: 0
                        },
                        borderSkipped: 'bottom'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                precision: 0
                            }
                        }
                    }
                }
            });
        }

        // Dashboard-Daten laden und rendern, wenn die Seite geladen ist
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                console.log('Lade Dashboard-Daten...');
                const dashboardData = await fetchDashboardData();

                if (dashboardData) {
                    console.log('Rendere Dashboard mit geladenen Daten...');
                    renderDashboard(dashboardData);
                } else {
                    console.error('Keine Dashboard-Daten verfügbar!');
                }
            } catch (error) {
                console.error('Fehler beim Laden des Dashboards:', error);
            }
        });
    </script>
</Layout>